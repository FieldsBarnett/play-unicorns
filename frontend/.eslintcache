[{"C:\\Users\\field\\Desktop\\PlayUnicorns\\frontend\\src\\index.tsx":"1","C:\\Users\\field\\Desktop\\PlayUnicorns\\frontend\\src\\components\\App.tsx":"2","C:\\Users\\field\\Desktop\\PlayUnicorns\\frontend\\src\\context\\socket.ts":"3","C:\\Users\\field\\Desktop\\PlayUnicorns\\frontend\\src\\components\\Lobby.tsx":"4","C:\\Users\\field\\Desktop\\PlayUnicorns\\frontend\\src\\components\\Board.tsx":"5","C:\\Users\\field\\Desktop\\PlayUnicorns\\frontend\\src\\context\\models.ts":"6","C:\\Users\\field\\Desktop\\PlayUnicorns\\frontend\\src\\components\\Opponents.tsx":"7","C:\\Users\\field\\Desktop\\PlayUnicorns\\frontend\\src\\components\\Stable.tsx":"8","C:\\Users\\field\\Desktop\\PlayUnicorns\\frontend\\src\\components\\Deck.tsx":"9","C:\\Users\\field\\Desktop\\PlayUnicorns\\frontend\\src\\components\\Hand.tsx":"10","C:\\Users\\field\\Desktop\\PlayUnicorns\\frontend\\src\\components\\FaceCard.tsx":"11","C:\\Users\\field\\Desktop\\PlayUnicorns\\frontend\\src\\components\\PlaceHolder.tsx":"12"},{"size":227,"mtime":1607817670315,"results":"13","hashOfConfig":"14"},{"size":576,"mtime":1607845135409,"results":"15","hashOfConfig":"14"},{"size":133,"mtime":1607360592123,"results":"16","hashOfConfig":"14"},{"size":2163,"mtime":1607845108323,"results":"17","hashOfConfig":"14"},{"size":1901,"mtime":1607886923479,"results":"18","hashOfConfig":"14"},{"size":555,"mtime":1607730432908,"results":"19","hashOfConfig":"14"},{"size":1768,"mtime":1607753298418,"results":"20","hashOfConfig":"14"},{"size":2388,"mtime":1607797115055,"results":"21","hashOfConfig":"14"},{"size":1327,"mtime":1607887695857,"results":"22","hashOfConfig":"14"},{"size":1555,"mtime":1607887651815,"results":"23","hashOfConfig":"14"},{"size":1279,"mtime":1607898430331,"results":"24","hashOfConfig":"14"},{"size":404,"mtime":1607750329659,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1at2yay",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\field\\Desktop\\PlayUnicorns\\frontend\\src\\index.tsx",[],["58","59"],"C:\\Users\\field\\Desktop\\PlayUnicorns\\frontend\\src\\components\\App.tsx",["60"],"import './App.css';\nimport React, { useEffect, useState } from 'react';\nimport Lobby from './Lobby';\nimport socket from '../context/socket';\nimport Board from './Board';\n\nexport default function App() {\n  const [gameState, setGameState] = useState<any>();\n  const [name, setName] = useState<String>(\"\");\n  useEffect(() => {\n    socket.once('gameState', (gameState: any) => {\n      console.log(gameState);\n      setGameState(gameState);\n    });\n  }, [1]);\n\n  return (\n    gameState ? <Board gameState={gameState} myName={name}/> : <Lobby name={name} setName={setName}/>\n  );\n}\n","C:\\Users\\field\\Desktop\\PlayUnicorns\\frontend\\src\\context\\socket.ts",["61"],"import { Socket } from \"dgram\";\r\nimport { io } from 'socket.io-client';\r\nconst socket = io('localhost:4000');\r\nexport default socket;","C:\\Users\\field\\Desktop\\PlayUnicorns\\frontend\\src\\components\\Lobby.tsx",["62","63"],"import './Lobby.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { CSSTransition, SwitchTransition, TransitionGroup } from 'react-transition-group';\r\nimport socket from '../context/socket';\r\n\r\nexport default function Lobby(props: any) {\r\n  const [players, setPlayers] = useState<String[]>([]);\r\n  const [warning, setWarning] = useState<String>(\"\");\r\n  let nameInput: any = React.createRef();\r\n\r\n  useEffect(() => {\r\n    socket.on('players', (players: string[]) => {\r\n      console.log('players', players);\r\n      setPlayers(players);\r\n    });\r\n    socket.on('nameTaken', () => {\r\n      console.log('nameTaken');\r\n      props.setName(\"\");\r\n      setWarning(\"Someone else is using that name\");\r\n    });\r\n  }, [1]);\r\n\r\n  function join() {\r\n    console.log('join');\r\n    let input = nameInput.current.value.toUpperCase()\r\n    socket.emit('join', input);\r\n    // Client side check first so we don't set state when not necessary\r\n    if (!players.includes(input)) props.setName(input);\r\n    nameInput.current.value = props.name;\r\n    setWarning(\"\");\r\n  }\r\n  function start() {\r\n    console.log('start');\r\n    socket.emit('start');\r\n  }\r\n\r\n  let control = players.includes(props.name) ? (\r\n    <CSSTransition timeout={300} key=\"start\">\r\n      <button className=\"start\" onClick={start}>Everyone's Here</button>\r\n    </CSSTransition>\r\n  ) : (\r\n    <CSSTransition timeout={300} key=\"join\">\r\n      <div className=\"nameControl\">\r\n        <input placeholder=\"Your Name\" ref={nameInput}/>\r\n        <button className=\"join\" onClick={join}>Join</button>\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n\r\n  return (\r\n    <div className=\"lobby\">\r\n      <div className=\"controls\">\r\n      {warning ? <div className=\"warning\">{warning}</div> : <></>}\r\n        <SwitchTransition>\r\n            {control}\r\n        </SwitchTransition>\r\n      </div>\r\n      <TransitionGroup className=\"namesContainer\">\r\n        {players.map((playerName: any) => {\r\n          return (\r\n          <CSSTransition timeout={300} classNames=\"playerName\" key={playerName}>\r\n            <div>{playerName}</div>\r\n          </CSSTransition>)\r\n        })}\r\n      </TransitionGroup>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\field\\Desktop\\PlayUnicorns\\frontend\\src\\components\\Board.tsx",["64","65"],"import './Board.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Hand } from './Hand';\r\nimport { Stable } from './Stable';\r\nimport { Deck } from './Deck';\r\nimport socket from '../context/socket';\r\nimport { Opponents } from './Opponents';\r\nimport { Card, CardType, GameState } from '../context/models';\r\n\r\nlet nursery: Card[] = [\r\n  {id: 'Baby Back', type: CardType.INSTANT }, {id: 'Baby Back', type: CardType.INSTANT }\r\n];\r\n\r\nlet deck: Card[] = [\r\n  {id: 'Back', type: CardType.INSTANT }, {id: 'Back', type: CardType.INSTANT }, {id: 'Back', type: CardType.INSTANT }, {id: 'Back', type: CardType.INSTANT }\r\n];\r\n\r\n\r\nexport default function Board(props: any) {\r\n  const [gameState, setGameState] = useState<GameState>(\r\n    props.gameState || { playerStates: [], deck: [], nursery: [], discardPile: [], selectedCard: null }\r\n  );\r\n\r\n  let myState = gameState.playerStates.find(playerState => {return playerState.name === props.myName})\r\n    || {stable: [], hand: []};\r\n  let opponentStates = gameState.playerStates.filter(state => { return state.name != props.myName});\r\n\r\n  useEffect(() => {\r\n    socket.on('gameState', (newState: GameState) => {\r\n      setGameState(newState);\r\n    });\r\n  }, [1]);\r\n\r\n  return (\r\n      <div className=\"board\">\r\n        <Opponents opponentStates={opponentStates} selectedCard={gameState.selectedCard} key={opponentStates}/>\r\n        <div className=\"decks\">\r\n          <Deck cards={nursery} deckType=\"nursery\"/>\r\n          <Deck cards={deck} deckType=\"deck\"/>\r\n          <Deck cards={gameState.discardPile} cardsDisplayed={10} chaos={20} useOffset={true} deckType=\"discardPile\"/>\r\n        </div>\r\n        <div>\r\n          <Stable cards={myState.stable} isSelf={true} selectedCard={gameState.selectedCard} playerName={props.myName}/>\r\n          <Hand cards={myState.hand} selectedCard={gameState.selectedCard}/>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n","C:\\Users\\field\\Desktop\\PlayUnicorns\\frontend\\src\\context\\models.ts",[],"C:\\Users\\field\\Desktop\\PlayUnicorns\\frontend\\src\\components\\Opponents.tsx",["66","67","68"],"import React, { useState } from 'react';\r\nimport { CSSTransition, SwitchTransition, TransitionGroup } from 'react-transition-group';\r\nimport { Hand } from './Hand';\r\nimport './Opponents.css'\r\nimport { Stable } from './Stable';\r\n\r\nexport function Opponents(props: any) {\r\n    const [selectedOpponent, setSelectedOpponent] = useState(\"\");\r\n\r\n    if (props.opponentStates.length > 0\r\n        && !selectedOpponent) setSelectedOpponent(props.opponentStates[Math.floor(props.opponentStates.length/2)].name);\r\n\r\n    let opponentState = props.opponentStates.find((state:any) => state.name == selectedOpponent)\r\n                        || {cards: [], name: \"\", hand: []};\r\n\r\n    return(\r\n        <div>\r\n            <SwitchTransition>\r\n                <CSSTransition classNames=\"opponent-board\" timeout={200} key={opponentState.name}>\r\n                    <div className=\"opponent-board\">\r\n                        <Stable cards={opponentState.stable} isSelf={false} selectedCard={props.selectedCard} playerName={opponentState.name}/>\r\n                        <Hand hideHand={true} isOpponent={true} cards={opponentState.hand} selectedCard={props.selectedCard}/>\r\n                    </div>\r\n                </CSSTransition>\r\n            </SwitchTransition>\r\n            <div className=\"opponent-name-container\">\r\n                {props.opponentStates.map((eachState: any) => {\r\n                    return (\r\n                        <div\r\n                        className={eachState.name == opponentState.name ? 'selected':''}\r\n                        onMouseOver={() => setSelectedOpponent(eachState.name)}>\r\n                            {eachState.name}\r\n                        </div>);\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}","C:\\Users\\field\\Desktop\\PlayUnicorns\\frontend\\src\\components\\Stable.tsx",[],"C:\\Users\\field\\Desktop\\PlayUnicorns\\frontend\\src\\components\\Deck.tsx",["69","70"],"import React, { useEffect } from 'react';\r\nimport { Card } from '../context/models';\r\nimport socket from '../context/socket';\r\nimport './Deck.css'\r\nimport { CardFace } from './FaceCard';\r\n\r\ntype DeckProps = {\r\n    cards: Card[];\r\n    cardsDisplayed?: number;\r\n    chaos?: number;\r\n    useOffset?: boolean;\r\n    deckType?: string;\r\n}\r\n\r\ntype Position = {\r\n    rotation: number;\r\n    offset: number;\r\n}\r\n\r\nexport function Deck( props: DeckProps) {\r\n\r\n    let chaos = props.chaos || 10;\r\n    let numToDisplay = props.cardsDisplayed || props.cards.length;\r\n    let displayedCards = props.cards.slice(0, numToDisplay);\r\n\r\n    useEffect(() => {\r\n        socket.on('drawAnimation', (playerName: string) => {\r\n        });\r\n    }, [1])\r\n\r\n    function doNothing() {\r\n        // Cancel out normal onClick of card\r\n    }\r\n\r\n    function draw() {\r\n        socket.emit('draw', props.deckType);\r\n    };\r\n\r\n    let deck = props.cards.length ? (\r\n        <div className=\"deck\" onClick={draw}>\r\n        {displayedCards.map((card: Card, index) => {\r\n            return (\r\n                <div className=\"animation-container\" key={card.uid}>\r\n                    <CardFace onClick={doNothing} id={card.id} chaos={chaos} useOffset={props.useOffset}/>\r\n                </div>\r\n            );\r\n        })}\r\n    </div>) : <></>\r\n\r\n    return deck;\r\n}","C:\\Users\\field\\Desktop\\PlayUnicorns\\frontend\\src\\components\\Hand.tsx",[],"C:\\Users\\field\\Desktop\\PlayUnicorns\\frontend\\src\\components\\FaceCard.tsx",["71"],"import React, { useState } from 'react';\r\nimport socket from '../context/socket';\r\nimport './FaceCard.css'\r\n\r\ntype CardProps = {\r\n    onClick?: any;\r\n}\r\n\r\nexport function CardFace( props: CardProps | any ) {\r\n    const [position, setPosition] = useState(generatePosition(props.chaos))\r\n\r\n    function destroyCard(e: any) {\r\n        e.preventDefault();\r\n        socket.emit('targetCard', props.uid);\r\n    }\r\n\r\n    function stealCard(e: any) {\r\n        socket.emit('stealCard', props.uid);\r\n    }\r\n\r\n    let rotation: number = position.rotation;\r\n    let offset: number = position.offset;\r\n\r\n    function generatePosition(chaos: number | undefined) {\r\n        if (!chaos) return {rotation: 0, offset: 0}\r\n        let rotation = (Math.random() * (chaos*2) - chaos);\r\n        let offset = props.useOffset ? (Math.random()*chaos*2 - chaos) : 0;\r\n        return {rotation: rotation, offset: offset};\r\n    }\r\n\r\n    return(\r\n        <img\r\n            data-uid={props.uid}\r\n            className=\"card\"\r\n            onClick={props.onClick || stealCard}\r\n            onContextMenu={destroyCard}\r\n            src={'../cards/' + props.id + '.jpg'} alt={props.id}\r\n            style={props.chaos ? { transform: 'rotate('+rotation+'deg) translate('+offset+'px,'+offset+'px)'} : {}}/>\r\n    )\r\n}","C:\\Users\\field\\Desktop\\PlayUnicorns\\frontend\\src\\components\\PlaceHolder.tsx",[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":15,"column":7,"nodeType":"78","endLine":15,"endColumn":8},{"ruleId":"79","severity":1,"message":"80","line":1,"column":10,"nodeType":"81","messageId":"82","endLine":1,"endColumn":16},{"ruleId":"76","severity":1,"message":"83","line":21,"column":6,"nodeType":"84","endLine":21,"endColumn":9,"suggestions":"85"},{"ruleId":"76","severity":1,"message":"77","line":21,"column":7,"nodeType":"78","endLine":21,"endColumn":8},{"ruleId":"86","severity":1,"message":"87","line":26,"column":83,"nodeType":"88","messageId":"89","endLine":26,"endColumn":85},{"ruleId":"76","severity":1,"message":"77","line":32,"column":7,"nodeType":"78","endLine":32,"endColumn":8},{"ruleId":"79","severity":1,"message":"90","line":2,"column":43,"nodeType":"81","messageId":"82","endLine":2,"endColumn":58},{"ruleId":"86","severity":1,"message":"91","line":13,"column":77,"nodeType":"88","messageId":"89","endLine":13,"endColumn":79},{"ruleId":"86","severity":1,"message":"91","line":30,"column":51,"nodeType":"88","messageId":"89","endLine":30,"endColumn":53},{"ruleId":"79","severity":1,"message":"92","line":15,"column":6,"nodeType":"81","messageId":"82","endLine":15,"endColumn":14},{"ruleId":"76","severity":1,"message":"77","line":29,"column":9,"nodeType":"78","endLine":29,"endColumn":10},{"ruleId":"79","severity":1,"message":"93","line":10,"column":22,"nodeType":"81","messageId":"82","endLine":10,"endColumn":33},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"react-hooks/exhaustive-deps","The 1 literal is not a valid dependency because it never changes. You can safely remove it.","Literal","@typescript-eslint/no-unused-vars","'Socket' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["96"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'TransitionGroup' is defined but never used.","Expected '===' and instead saw '=='.","'Position' is defined but never used.","'setPosition' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},"Update the dependencies array to be: [props]",{"range":"99","text":"100"},[725,728],"[props]"]